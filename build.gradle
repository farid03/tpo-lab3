plugins {
    id 'java'
    id 'pmd'
    id 'jacoco'
    id 'io.qameta.allure' version '2.9.3'
}

group 'ru.ifmo.se'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    allureVersion = '2.20.1'
    fluentleniumVersion = '5.0.4'
    junitVersion = '5.9.1'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    implementation 'org.testng:testng:7.1.0'
    implementation 'org.testng:testng:7.1.0'
    implementation('com.codeborne:selenide:6.11.0')
    implementation("io.qameta.allure:allure-selenide:${allureVersion}")
    implementation("org.fluentlenium:fluentlenium-core:${fluentleniumVersion}")
    implementation("org.fluentlenium:fluentlenium-assertj:${fluentleniumVersion}")
    implementation("org.fluentlenium:fluentlenium-junit-jupiter:${fluentleniumVersion}")
    implementation('io.github.bonigarcia:webdrivermanager:5.3.1')
    implementation('org.assertj:assertj-core:3.24.2')
    implementation('org.slf4j:slf4j-simple:2.0.6')
    implementation('com.typesafe:config:1.0.2')

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    maxParallelForks 2
    useJUnitPlatform()
    dependsOn pmdMain, pmdTest
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

allure {
    autoconfigure = true
    version = "${allureVersion}"

    useJUnit5 {
        version = "${allureVersion}"
    }
}

pmd {
    consoleOutput = true
    toolVersion = "6.54.0"
    ruleSetFiles = files("config/pmd.xml") // Исключения только через внешний файл
    ruleSets = []
}

jacocoTestReport {
    reports {
        html.enabled true
    }
}
jacocoTestCoverageVerification {
    dependsOn test

    violationRules {
        rule {
            limit {
                counter = 'CLASS'
                value = 'MISSEDCOUNT'
                minimum = 0
            }
        }
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
        }
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
        }
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
        }
    }
}
check.dependsOn jacocoTestReport, jacocoTestCoverageVerification